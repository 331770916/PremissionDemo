switch (id) {
            case R.id.camera://单独使用相机

                EasyPhotos.createCamera(this)
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .start(101);

                break;

            case R.id.album_single://相册单选，无相机功能

                EasyPhotos.createAlbum(this, false, GlideEngine.getInstance())
                        .start(101);

                break;

            case R.id.album_multi://相册多选，无相机功能

                EasyPhotos.createAlbum(this, false, GlideEngine.getInstance())
                        .setCount(9)
                        .start(101);
                break;

            case R.id.album_camera_single://相册单选，有相机功能

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .start(101);
                break;

            case R.id.album_camera_multi://相册多选，有相机功能

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(22)
                        .start(new SelectCallback() {
                            @Override
                            public void onResult(ArrayList<Photo> photos, boolean isOriginal) {
                                selectedPhotoList.clear();
                                selectedPhotoList.addAll(photos);
                                adapter.notifyDataSetChanged();
                                rvImage.smoothScrollToPosition(0);
                            }
                        });
                break;

            case R.id.album_ad://相册中包含广告

                // 需要在启动前创建广告view
                // 广告view不能有父布局
                // 广告view可以包含子布局
                // 广告View的数据可以在任何时候绑定
                initAdViews();

                //启动方法，装载广告view
                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setCameraLocation(Setting.LIST_FIRST)
                        .setAdView(photosAdView, photosAdLoaded, albumItemsAdView, albumItemsAdLoaded)
                        .start(101);

                break;

            case R.id.album_size://只显示限制尺寸或限制文件大小以上的图片

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setMinWidth(500)
                        .setMinHeight(500)
                        .setMinFileSize(1024 * 10)
                        .start(101);

                break;

            case R.id.album_original_usable://显示原图按钮，并且默认选中，按钮可用

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setOriginalMenu(true, true, null)
                        .start(101);

                break;

            case R.id.album_original_unusable://显示原图按钮，并且默认不选中，按钮不可用。使用场景举例：仅VIP可以上传原图

                boolean isVip = false;//假设获取用户信息发现该用户不是vip

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setOriginalMenu(false, isVip, "该功能为VIP会员特权功能")
                        .start(101);

                break;

            case R.id.album_has_video_gif://相册中显示视频和gif图
                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setVideo(true)
                        .setGif(true)
                        .start(101);
                break;

            case R.id.album_only_video://相册中只选择视频(相册只有视频 会禁用相机和拼图)
                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .filter(Type.VIDEO)
                        .start(101);
                break;

            case R.id.album_no_menu://相册中不显示底部的编辑图标按钮
                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setCount(9)
                        .setPuzzleMenu(false)
                        .setCleanMenu(false)
                        .start(101);
                break;

            case R.id.album_selected://相册中包含默认勾选图片

                EasyPhotos.createAlbum(this, true, GlideEngine.getInstance())
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .setPuzzleMenu(false)
                        .setCount(9)
                        .setSelectedPhotos(selectedPhotoList)
//                        .setSelectedPhotoPaths(selectedPhotoPathList)两种方式参数类型不同，根据情况任选
                        .start(101);

                break;

            case R.id.addWatermark: //给图片添加水印

                if (selectedPhotoList.isEmpty()) {
                    Toast.makeText(this, "没选图片", Toast.LENGTH_SHORT).show();
                    return true;
                }

                //这一步如果图大的话会耗时，但耗时不长，你可以在异步操作。另外copy出来的bitmap在确定不用的时候记得回收，如果你用Glide操作过copy出来的bitmap那就不要回收了，否则Glide会报错。
                Bitmap watermark = BitmapFactory.decodeResource(getResources(), R.drawable.watermark).copy(Bitmap.Config.RGB_565, true);
                try {
                    bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(selectedPhotoList.get(0).uri)).copy(Bitmap.Config.ARGB_8888, true);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                //给图片添加水印的api
                EasyPhotos.addWatermark(watermark, bitmap, 1080, 20, 20, true);

                bitmapView.setVisibility(View.VISIBLE);
                bitmapView.setImageBitmap(bitmap);
                Toast.makeText(SampleActivity.this, "水印在左下角", Toast.LENGTH_SHORT).show();

                break;

            case R.id.puzzle:
                EasyPhotos.createAlbum(this, false, GlideEngine.getInstance())
                        .setCount(9)
                        .setPuzzleMenu(false)
                        .setFileProviderAuthority("com.huantansheng.easyphotos.demo.fileprovider")
                        .start(new SelectCallback() {
                            @Override
                            public void onResult(ArrayList<Photo> photos, boolean isOriginal) {
                                EasyPhotos.startPuzzleWithPhotos(SampleActivity.this, photos, Environment.getExternalStorageDirectory().getAbsolutePath(), "AlbumBuilder", false, GlideEngine.getInstance(), new PuzzleCallback() {
                                    @Override
                                    public void onResult(Photo photo) {
                                        selectedPhotoList.clear();
                                        selectedPhotoList.add(photo);
                                        adapter.notifyDataSetChanged();
                                        rvImage.smoothScrollToPosition(0);
                                    }
                                });
                            }
                        });

            case R.id.face_detection://人脸检测，目前仅支持正脸检测
                //暂时不做了。会导致lib过大，而且并不稳定
                break;
            default:
                break;

        }


        @Override
            protected void onActivityResult(int requestCode, int resultCode, Intent data) {
                super.onActivityResult(requestCode, resultCode, data);
                if (albumItemsAdView != null) {
                    if (albumItemsAdView.getParent() != null) {
                        ((FrameLayout) (albumItemsAdView.getParent())).removeAllViews();
                    }
                }
                if (photosAdView != null) {
                    if (photosAdView.getParent() != null) {
                        ((FrameLayout) (photosAdView.getParent())).removeAllViews();
                    }
                }
                if (RESULT_OK == resultCode) {
                    //相机或相册回调
                    if (requestCode == 101) {
                        //返回对象集合：如果你需要了解图片的宽、高、大小、用户是否选中原图选项等信息，可以用这个
                        ArrayList<Photo> resultPhotos = data.getParcelableArrayListExtra(EasyPhotos.RESULT_PHOTOS);

                        //返回图片地址集合时如果你需要知道用户选择图片时是否选择了原图选项，用如下方法获取
                        boolean selectedOriginal = data.getBooleanExtra(EasyPhotos.RESULT_SELECTED_ORIGINAL, false);


                        selectedPhotoList.clear();
                        selectedPhotoList.addAll(resultPhotos);
                        adapter.notifyDataSetChanged();
                        rvImage.smoothScrollToPosition(0);

                        return;
                    }

                    //为拼图选择照片的回调
                    if (requestCode == 102) {

                        ArrayList<Photo> resultPhotos =
                                data.getParcelableArrayListExtra(EasyPhotos.RESULT_PHOTOS);
                        if (resultPhotos.size() == 1) {
                            resultPhotos.add(resultPhotos.get(0));
                        }
                        selectedPhotoList.clear();
                        selectedPhotoList.addAll(resultPhotos);

                        EasyPhotos.startPuzzleWithPhotos(this, selectedPhotoList, Environment.getExternalStorageDirectory().getAbsolutePath(), "AlbumBuilder", 103, false, GlideEngine.getInstance());
                        return;
                    }

                    //拼图回调
                    if (requestCode == 103) {
                        Photo puzzlePhoto = data.getParcelableExtra(EasyPhotos.RESULT_PHOTOS);
                        selectedPhotoList.clear();
                        selectedPhotoList.add(puzzlePhoto);
                        adapter.notifyDataSetChanged();
                        rvImage.smoothScrollToPosition(0);
                    }


                } else if (RESULT_CANCELED == resultCode) {
                    Toast.makeText(this, "cancel", Toast.LENGTH_SHORT).show();
                }
            }